#* @vtlvariable name="instance" type="com.bardframework.plugin.BardTesterMojo" *#
#* @vtlvariable name="servletClass" type="java.lang.String" *#
#* @vtlvariable name="handlerClass" type="java.lang.String" *#
#* @vtlvariable name="package" type="java.lang.String" *#
#* @vtlvariable name="apis" type="java.util.Set<com.bardframework.bard.core.doc.Api>" *#
package
    $package;

import com.bardframework.bard.util.server.BardServer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.mashape.unirest.request.HttpRequest;

import static com.mashape.unirest.http.Unirest.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;

import java.io.IOException;

public class ${handlerClass}Tester {
    protected static String host;
    private static BardServer server = new BardServer(${servletClass}.
    class);
    protected static ObjectMapper mapper = new ObjectMapper();

    @BeforeClass
    public static void runBeforeClass() throws Exception {
        host = server.startForTest();
    }

    @AfterClass
    public static void runAfterClass() throws Exception {
        server.stop();
        server = new BardServer(${servletClass}. class);
    }

    #foreach ($api in $apis)
        public static <T> T $api.handlerMethod.name (
        #foreach ($params in $api.parameters)
            $params.rawType.name $instance.covertNameToParam($params.name),
        #end
        Class<T> _type
    ) throws UnirestException, IOException {
            String _c = Unirest. ${instance.lowerMethod($api.method)}(host + "$api.path")
        #foreach ($params in $api.parameters)
            #if ($params.belongs == "header")
                #set($method = "header")
            #elseif ($params.belongs == "path")
                #set($method = "routeParam")
            #elseif ($params.belongs == "url")
                #set($method = "queryString")
            #elseif ($params.belongs == "form" || $params.belongs == "multipart" )
                #set($method = "field")
            #end
            .${method}("$params.name",$params.name)
        #end
            .asString().getBody();
        return mapper.readValue(_c, _type);
    }
    #end
}


